apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  labels:
    app.kubernetes.io/app: {{ .Values.name }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/app: {{ .Values.name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/app: {{ .Values.name }}
    spec:
      containers:
        - name: {{ .Values.name }}
          image: freeverseio/laos-ownership-indexer:{{ .Values.imageTag | lower }}
          imagePullPolicy: Always
          volumeMounts:
            - name: db-certificate
              mountPath: "/squid/data"
          resources:
            requests:
              memory: "1Gi"
              cpu: '1'
            limits:
              memory: "2Gi"
              cpu: '2'
          env:
            - name: DB_NAME
              value: {{ .Values.postgresDb }}
            - name: DB_PORT
              value: {{ .Values.postgresPort | quote }}
            - name: DB_HOST
              value: {{ .Values.postgresDbHost }}
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  name: indexers-private-config
                  key: {{ .Values.postgresPasswordSecretKey }}
            - name: DB_USER
              value: {{ .Values.postgresUser }}
            - name: DB_SSL
              value: "true"
            - name: DB_SSL_CA_FILE
              value: "./data/ca-certificate.pem"
            {{- if hasKey .Values "gatewayEndpoint" }}
            - name: GATEWAY_ENDPOINT
              value: {{ .Values.gatewayEndpoint }}
            {{- end }}
            - name: PRIVATE_IPFS_GATEWAY
              valueFrom:
                secretKeyRef:
                  name: indexers-private-config
                  key: indexerIpfsGateway
            - name: RPC_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: indexers-private-config
                  key: {{ .Values.rpcEndpointSecretKey | quote }}
            - name: LAOS_GLOBAL_CONSENSUS
              value: {{ .Values.laosGlobalConsensus | quote }}
            - name: LAOS_PARACHAIN
              value: {{ .Values.laosParachain | quote }}
            - name: LAOS_PALLET_INSTANCE
              value: {{ .Values.laosPalletInstance | quote }}
            - name: STARTING_BLOCK_OWNERSHIP
              value: {{ .Values.startingBlock | quote }}
            {{- if hasKey .Values "indexerOwnershipParseTraces" }}
            - name: OWNERSHIP_PARSE_TRACES
              value: {{ .Values.indexerOwnershipParseTraces | quote }}
            {{- end }}
            {{- if hasKey .Values "rpcRateLimit" }}
            - name: RPC_RATE_LIMIT_OWNERSHIP
              value: {{ .Values.rpcRateLimit | quote }}
            {{- end }}
            {{- if hasKey .Values "maxBatchCallSizeOwnership" }}
            - name: MAX_BATCH_CALL_SIZE_OWNERSHIP
              value: {{ .Values.maxBatchCallSizeOwnership | quote }}
            {{- end }}
            {{- if hasKey .Values "pinataGatewayApiTokenSecretKey" }}
            - name: PRIVATE_IPFS_GATEWAY_API_KEY
              valueFrom:
                secretKeyRef:
                  name: indexers-private-config
                  key: {{ .Values.pinataGatewayApiTokenSecretKey | quote }}
            {{- end }}
            - name: CHAIN_NAME
              value: {{ .Values.chainName }}
            - name: OWNERSHIP_CONTRACT_MODEL
              value: {{ .Values.chainName}}OwnershipContract
            - name: ASSET_MODEL
              value: {{ .Values.chainName}}Asset
            - name: TRANSFER_MODEL
              value: {{ .Values.chainName}}Transfer
            - name: SCHEMA_NAME
              value: ownership_chain_{{ .Values.chainName | lower }}_processor
          command: ["sqd", {{ .Values.command }}]
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - |
                BLOCKS_PER_SECOND=$(wget -qO- http://localhost:3000/metrics | grep 'sqd_processor_mapping_blocks_per_second' | awk '{print $2}')
                if [ -z "$BLOCKS_PER_SECOND" ]; then
                  echo "Metric not available. /metrics endpoint might not be accessible."
                  exit 1
                fi
                if (( $(echo "$BLOCKS_PER_SECOND < 1" | bc -l) )); then
                  echo "Processor stalled! Blocks per second is too low: $BLOCKS_PER_SECOND"
                  exit 1
                fi
                exit 0
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 3
      volumes:
        - name: db-certificate
          secret:
            secretName: db-cert